SIMPLE QUERY:

Problem 1:

SELECT MEMBER_ID, MEMBER_NAME, CITY, MEMBERSHIP_STATUS
FROM LMS_MEMBERS
WHERE MEMBERSHIP_STATUS = 'Permanent';

Problem2:

SELECT B.BOOK_CODE, B.PUBLICATION, B.PRICE, S.SUPPLIER_NAME
FROM LMS_BOOK_DETAILS B, LMS_SUPPLIERS_DETAILS S, LMS_BOOK_ISSUE BI
WHERE B.BOOK_CODE = BI.BOOK_CODE
  AND B.SUPPLIER_ID = S.SUPPLIER_ID
  AND BI.BOOK_CODE = 'BL000001'; 
  
Problem3:

SELECT DISTINCT M.MEMBER_ID, M.MEMBER_NAME
FROM LMS_MEMBERS M, LMS_BOOK_ISSUE BI
WHERE M.MEMBER_ID = BI.MEMBER_ID
  AND BI.BOOK_CODE = 'BL000002';
  
Problem4:

SELECT BOOK_CODE, BOOK_TITLE, AUTHOR
FROM LMS_BOOK_DETAILS
WHERE AUTHOR LIKE 'P%';

Problem5:

SELECT COUNT(*) AS NO_OF_BOOKS
FROM LMS_BOOK_DETAILS
WHERE CATEGORY = 'JAVA';

Problem6:

SELECT CATEGORY, COUNT(*) AS NO_OF_BOOKS
FROM LMS_BOOK_DETAILS
GROUP BY CATEGORY;

Problem7:

SELECT COUNT(*) AS NO_OF_BOOKS
FROM LMS_BOOK_DETAILS
WHERE PUBLICATION = 'Prentice Hall';

Problem8:

SELECT B.BOOK_CODE, B.BOOK_TITLE
FROM LMS_BOOK_DETAILS B, LMS_BOOK_ISSUE BI
WHERE B.BOOK_CODE = BI.BOOK_CODE
  AND BI.DATE_ISSUE = '2012-04-01';

Problem9:

SELECT MEMBER_ID, MEMBER_NAME, DATE_REGISTER, DATE_EXPIRE
FROM LMS_MEMBERS
WHERE DATE_EXPIRE < '2013-04-01';

Problem10:

SELECT MEMBER_ID, MEMBER_NAME, DATE_REGISTER, MEMBERSHIP_STATUS
FROM LMS_MEMBERS
WHERE DATE_REGISTER < '2012-03-01'
AND MEMBERSHIP_STATUS = 'Temporary';

Problem11:

SELECT MEMBER_ID, MEMBER_NAME AS Name
FROM LMS_MEMBERS
WHERE CITY IN ('CHENNAI', 'DELHI');

Problem12:

SELECT DISTINCT CONCAT(BOOK_TITLE, '_is_written_by_', AUTHOR) AS BOOK_WRITTEN_BY
FROM LMS_BOOK_DETAILS;

AVERAGE QUERY:

Problem1:

SELECT M.MEMBER_ID, M.MEMBER_NAME, B.BOOK_CODE, B.BOOK_TITLE
FROM LMS_MEMBERS M
JOIN LMS_BOOK_ISSUE BI ON M.MEMBER_ID = BI.MEMBER_ID
JOIN LMS_BOOK_DETAILS B ON BI.BOOK_CODE = B.BOOK_CODE;

Problem2:

SELECT COUNT(*) AS NO_OF_BOOKS_AVAILABLE
FROM LMS_BOOK_DETAILS
WHERE BOOK_CODE NOT IN (SELECT BOOK_CODE FROM LMS_BOOK_ISSUE);

Problem3:

SELECT M.MEMBER_ID, M.MEMBER_NAME, F.FINE_RANGE, F.FINE_AMOUNT
FROM LMS_MEMBERS M
JOIN LMS_BOOK_ISSUE BI ON M.MEMBER_ID = BI.MEMBER_ID
JOIN LMS_FINE_DETAILS F ON BI.FINE_RANGE = F.FINE_RANGE
WHERE F.FINE_AMOUNT < 100;

Problem4:

SELECT BOOK_CODE, BOOK_TITLE, PUBLICATION, BOOK_EDITION, PRICE, PUBLISH_DATE
FROM LMS_BOOK_DETAILS
ORDER BY PUBLISH_DATE, PUBLICATION, BOOK_EDITION;

Problem5:

SELECT BOOK_CODE, BOOK_TITLE, RACK_NUM
FROM LMS_BOOK_DETAILS
WHERE RACK_NUM = 'A1'
ORDER BY BOOK_TITLE ASC;

Problem6:

SELECT M.MEMBER_ID, M.MEMBER_NAME, BI.DATE_RETURN, BI.DATE_RETURNED
FROM LMS_BOOK_ISSUE BI
JOIN LMS_MEMBERS M ON BI.MEMBER_ID = M.MEMBER_ID
WHERE BI.DATE_RETURNED > BI.DATE_RETURN;

Problem7:

SELECT M.MEMBER_ID, M.MEMBER_NAME, M.DATE_REGISTER
FROM LMS_MEMBERS M
WHERE M.MEMBER_ID NOT IN (SELECT DISTINCT MEMBER_ID FROM LMS_BOOK_ISSUE);

Problem8:

SELECT M.MEMBER_ID, M.MEMBER_NAME
FROM LMS_MEMBERS M
WHERE M.MEMBER_ID NOT IN (
    SELECT DISTINCT BI.MEMBER_ID
    FROM LMS_BOOK_ISSUE BI
    JOIN LMS_FINE_DETAILS F ON BI.FINE_RANGE = F.FINE_RANGE
    WHERE YEAR(BI.DATE_ISSUE) = 2012
);

Problem9:

SELECT DATE_ISSUE, COUNT(*) AS NOOFBOOKS
FROM LMS_BOOK_ISSUE
GROUP BY DATE_ISSUE
ORDER BY NOOFBOOKS DESC
LIMIT 1;

Problem10:

SELECT B.BOOK_TITLE, B.SUPPLIER_ID
FROM LMS_BOOK_DETAILS B
WHERE B.AUTHOR = 'Herbert Schildt'
  AND B.BOOK_EDITION = 5
  AND B.SUPPLIER_ID = 'S01';
  
Problem11:

SELECT RACK_NUM, COUNT(*) AS NOOFBOOKS
FROM LMS_BOOK_DETAILS
GROUP BY RACK_NUM
ORDER BY RACK_NUM;

Problem12:

SELECT BI.BOOK_ISSUE_NO, M.MEMBER_NAME, M.DATE_REGISTER, M.DATE_EXPIRE,
       B.BOOK_TITLE, B.CATEGORY, B.AUTHOR, B.PRICE,
       BI.DATE_ISSUE, BI.DATE_RETURN, BI.DATE_RETURNED, 
       BI.FINE_RANGE, F.FINE_AMOUNT
FROM LMS_BOOK_ISSUE BI
JOIN LMS_MEMBERS M ON BI.MEMBER_ID = M.MEMBER_ID
JOIN LMS_BOOK_DETAILS B ON BI.BOOK_CODE = B.BOOK_CODE
JOIN LMS_FINE_DETAILS F ON BI.FINE_RANGE = F.FINE_RANGE;

Problem13:

SELECT BOOK_CODE, BOOK_TITLE, PUBLISH_DATE
FROM LMS_BOOK_DETAILS
WHERE MONTH(PUBLISH_DATE) = 12;

Problem14:

SELECT B.BOOK_CODE, B.BOOK_TITLE, S.SUPPLIER_NAME, B.PRICE
FROM LMS_BOOK_DETAILS B
JOIN LMS_SUPPLIERS_DETAILS S ON B.SUPPLIER_ID = S.SUPPLIER_ID
WHERE (B.SUPPLIER_ID, B.PRICE) IN (
    SELECT SUPPLIER_ID, MAX(PRICE)
    FROM LMS_BOOK_DETAILS
    GROUP BY SUPPLIER_ID
);

Problem15:

SELECT BOOK_CODE, BOOK_TITLE, PUBLICATION, 
       TIMESTAMPDIFF(YEAR, PUBLISH_DATE, CURDATE()) AS BOOK_AGE
FROM LMS_BOOK_DETAILS
ORDER BY BOOK_AGE DESC;

Complex query;

Problem1:

SELECT B.BOOK_CODE, B.BOOK_TITLE, S.SUPPLIER_NAME
FROM LMS_BOOK_DETAILS B
JOIN LMS_SUPPLIERS_DETAILS S ON B.SUPPLIER_ID = S.SUPPLIER_ID
WHERE S.SUPPLIER_ID = (
    SELECT SUPPLIER_ID
    FROM LMS_BOOK_DETAILS
    GROUP BY SUPPLIER_ID
    ORDER BY COUNT(*) DESC
    LIMIT 1
);

Problem2:

SELECT M.MEMBER_ID, M.MEMBER_NAME,
       (3 - COALESCE(COUNT(BI.BOOK_ISSUE_NO), 0)) AS REMAININGBOOKS
FROM LMS_MEMBERS M
LEFT JOIN LMS_BOOK_ISSUE BI ON M.MEMBER_ID = BI.MEMBER_ID
GROUP BY M.MEMBER_ID, M.MEMBER_NAME;

Problem3:

SELECT S.SUPPLIER_ID, S.SUPPLIER_NAME
FROM LMS_SUPPLIERS_DETAILS S
JOIN LMS_BOOK_DETAILS B ON S.SUPPLIER_ID = B.SUPPLIER_ID
GROUP BY S.SUPPLIER_ID, S.SUPPLIER_NAME
ORDER BY COUNT(B.BOOK_CODE) ASC
LIMIT 1;











